import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.adarshr.test-logger' version '4.0.0'
	id 'com.epages.restdocs-api-spec' version '0.17.1'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.timetoast'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

openapi3 {
	servers = [
			{ url = 'http://localhost:9090' },
			{ url = 'http://localhost:8080/timetoast' }
	]
	title = 'TimeToast icon-service API 문서'
	description = 'TimeToast icon-service API Docs'
	version = '1.0.0'
	format = 'json'
	outputDirectory = 'build/resources/main/static/docs'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	//testcontainers
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:testcontainers:1.20.3"
	testImplementation "org.testcontainers:junit-jupiter:1.20.3"
	testImplementation "org.testcontainers:mysql:1.20.3"

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	//Jakarta.
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//openAPI
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	//swagger
	swaggerUI 'org.webjars:swagger-ui:4.11.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
	useJUnitPlatform()

	dependsOn 'createOutputDirectory'
	finalizedBy 'openapi3'
}

testlogger {
	slowThreshold 0
}

tasks.register('createOutputDirectory')  {
	doFirst {
		delete file('src/main/resources/static/docs/')
		file(openapi3.outputDirectory).mkdirs()
		file('src/main/resources/static/docs/').mkdirs()
	}
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	doLast {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.json")

		def securitySchemesContent = "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n"
                                      "security:\n" +
				"  - APIKey: []"

		swaggerUIFile.append securitySchemesContent

		copy {
			from file("build/resources/main/static/docs/openapi3.json")
			into "src/main/resources/static/docs/"
		}
	}
}

bootJar {
	from("${openapi3.outputDirectory}") {
		into 'static/docs'
	}
}

jar.enabled = false